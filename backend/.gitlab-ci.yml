# This is the CI file to be tested with the sample repo, show compile, build, and documentation generation with javadoc
image: gradle:jdk21

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  SONARQUBE_PROJECT_KEY: ${CI_PROJECT_ID}:${CI_COMMIT_REF_SLUG}
  SONARQUBE_PROJECT_NAME: sa4/2024/team1-tier0/backend:${CI_COMMIT_REF_SLUG}
  SONARQUBE_GROUP_ID: AY8FGneFbcXSaHk6fbDm

stages:
  - build
  - test
  - quality
  - deploy

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

compile_job:
  stage: build
  script: gradle compileJava
  artifacts:
    when: always
    paths:
      - build/classes
    expire_in: 1 hour

javadoc_job:
  stage: build
  script: gradle javadoc
  artifacts:
    when: always
    paths:
      - build/docs
    expire_in: 1 hour

test_job:
  stage: test
  script: gradle test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle
  artifacts:
    when: always
    paths:
      - build/reports/jacoco/test/*
      - build/reports/tests/*
      - build/test-results/test/TEST-*
      - build/classes
    reports:
      junit: [ build/reports/jacoco/test/jacocoTestReport.xml, build/test-results/test/**/TEST-*.xml ]
    expire_in: 1 hour
  dependencies:
    - compile_job

.sonarqube-check:
  stage: quality
  tags:
    - ci-dev-runner
  image:
    name: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/sonarsource/sonar-scanner-cli:latest
    entrypoint: [ '' ]
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache

# This sonarqube job can be manually run on feature branches.
# It is allowed to fail.
sonarqube-check-branch:
  extends: .sonarqube-check
  rules:
    - if: ($CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_BRANCH != "main")
  when: manual
  allow_failure: true
  script:
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/projects/create?name=${SONARQUBE_PROJECT_NAME}&project=${SONARQUBE_PROJECT_KEY}\" || echo Project already exists"
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/permissions/add_group?projectKey=${SONARQUBE_PROJECT_KEY}&groupId=${SONARQUBE_GROUP_ID}&permission=user\" || echo Project permission already set or has error"
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/permissions/add_group?projectKey=${SONARQUBE_PROJECT_KEY}&groupId=${SONARQUBE_GROUP_ID}&permission=codeviewer\" || echo Project permission already set or has error"
    - sonar-scanner


## This sonarqube job is run on main and dev, and it's automatic.
## Moreover, it is *not* allowed to fail - if the Quality Gate fails,
## the pipeline fails.
sonarqube-check:
  extends: .sonarqube-check
  tags:
    - ci-dev-runner
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "main")
  allow_failure: false
  script:
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/projects/create?name=${SONARQUBE_PROJECT_NAME}&project=${SONARQUBE_PROJECT_KEY}\" || echo Project already exists"
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/permissions/add_group?projectKey=${SONARQUBE_PROJECT_KEY}&groupId=${SONARQUBE_GROUP_ID}&permission=user\" || echo Project permission already set or has error"
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/permissions/add_group?projectKey=${SONARQUBE_PROJECT_KEY}&groupId=${SONARQUBE_GROUP_ID}&permission=codeviewer\" || echo Project permission already set or has error"
    - sonar-scanner


# Deploy javadoc documentation in the public folder on GitLab
pages:
  stage: deploy
  script:
    - mv build/docs/javadoc public
  artifacts:
    paths:
      - public
  only:
    - dev